use crate::perm::{DefaultPermutation, Permutation};
use rand::rngs::ThreadRng;
use rand::Rng;
use std::cmp::max;
#[derive(Debug)]
pub struct RandPerm {
    size: usize,
    rng: ThreadRng,
    gen_elements: Vec<DefaultPermutation>,
    accum: DefaultPermutation,
}

impl RandPerm {
    /// Construct and initialise a random permutation generator.
    /// ```
    /// use stabchain::perm::{Permutation, DefaultPermutation};
    /// use stabchain::group::random_perm::RandPerm;
    /// let generators = &[DefaultPermutation::from_images(&[1, 0]), DefaultPermutation::from_images(&[0, 2, 3, 1])];
    /// let rand_perm = RandPerm::from_generators(11, generators, 50);
    /// ```
    pub fn from_generators(
        min_size: usize,
        generators: &[DefaultPermutation],
        initial_runs: usize,
    ) -> Self {
        let rng = rand::thread_rng();
        let mut gen_elements: Vec<DefaultPermutation> = if !generators.is_empty() {
            generators.to_vec()
        } else {
            vec![DefaultPermutation::id()]
        };
        let k = gen_elements.len();
        //Repeat elements if there aren't enough generators.
        for i in k..min_size {
            gen_elements.push(gen_elements[(i - k) % k].clone());
        }
        let accum = DefaultPermutation::id();
        let size = max(min_size, k);
        let mut rand = RandPerm {
            size,
            rng,
            gen_elements,
            accum,
        };
        // Inital randomisation.
        for _ in 0..initial_runs {
            rand.random_permutation();
        }
        rand
    }

    /// Generate a random permutation.
    /// ```
    /// use stabchain::perm::*;
    /// use stabchain::group::random_perm::RandPerm;
    /// let generators = &[DefaultPermutation::from_images(&[1, 0]), DefaultPermutation::from_images(&[0, 2, 3, 1])];
    /// let mut rand_perm = RandPerm::from_generators(11, generators, 50);
    /// rand_perm.random_permutation();
    /// ```
    pub fn random_permutation(&mut self) -> DefaultPermutation {
        let s = self.rng.gen_range(0, self.size);
        let mut t = s;
        // Generate another index that isn't equal to s.
        while t == s {
            t = self.rng.gen_range(0, self.size);
        }
        // Either take product or quotient.
        let e = if self.rng.gen::<bool>() { 1 } else { -1 };
        // Randomly determine order of operation.
        // The operation works by replacing a list entry with a product, and then accumulating with the stored permutation.
        if self.rng.gen::<bool>() {
            self.gen_elements[s] = self.gen_elements[s].multiply(&self.gen_elements[t].pow(e));
            self.accum = self.accum.multiply(&self.gen_elements[s]);
        } else {
            self.gen_elements[s] = self.gen_elements[t].pow(e).multiply(&self.gen_elements[s]);
            self.accum = self.gen_elements[s].multiply(&self.accum);
        }
        self.accum.clone()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    /// Test that only the indentity permutation is generated from an empty set of generators.
    fn empty_generators() {
        let id = DefaultPermutation::id();
        let mut rand_perm = RandPerm::from_generators(10, &[] as &[DefaultPermutation], 50);
        for _ in 0..50 {
            assert_eq!(id, rand_perm.random_permutation());
        }
    }
    #[test]
    /// Test that elements generated are in the subgroup generated by the generator
    fn closure_small() {
        let generator = DefaultPermutation::from_images(&[3, 0, 1, 2]);
        let elements = vec![
            generator.clone(),
            generator.pow(2),
            generator.pow(3),
            generator.pow(4),
        ];
        let mut rand_perm = RandPerm::from_generators(10, &[generator], 50);
        for _ in 0..50 {
            assert!(elements.contains(&rand_perm.random_permutation()));
        }
    }

    #[test]
    /// Test that elements generated are in the subgroup for multiple generators.
    fn closure_larger_disjoint() {
        use crate::group::Group;
        use crate::perm::export::CyclePermutation;
        let g = Group::new(&[
            CyclePermutation::single_cycle(&[1, 2, 4]).into(),
            CyclePermutation::single_cycle(&[3, 5, 8]).into(),
            CyclePermutation::single_cycle(&[7, 9]).into(),
        ]);
        let mut rand_perm = RandPerm::from_generators(10, g.generators(), 50);
        // dbg!(&rand_perm);
        let chain = g.stabchain();
        for _ in 0..100 {
            let perm = rand_perm.random_permutation();
            assert!(chain.in_group(&perm));
        }
    }

    #[ignore]
    #[test]
    ///Test that random elements from the symmetric group are included. This is ignored as it is slow.
    fn closure_larger_symmetric() {
        use crate::group::Group;
        let g = Group::symmetric(20);
        let mut rand_perm = RandPerm::from_generators(10, g.generators(), 1000);
        let chain = g.stabchain();
        for _ in 0..100 {
            let perm = rand_perm.random_permutation();
            assert!(chain.in_group(&perm));
        }
    }
}
